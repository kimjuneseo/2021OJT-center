/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-11-29 13:20:32 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.MemberDBBean;
import member.MemberDataBean;
import java.util.List;
import java.util.ArrayList;

public final class memberInfoAllForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("member.MemberDBBean");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("member.MemberDataBean");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>전체 회원 목록</title>\r\n");
      out.write("<style>\r\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap');\r\n");
      out.write("	/*전체영역*/\r\n");
      out.write("	a{text-decoration: none; color: #000;}\r\n");
      out.write("	.flex{display: flex}\r\n");
      out.write("	#container{ width: 400px; margin: 20px auto;}\r\n");
      out.write("	.btn { padding:10px; background: #b4baba; border: none; border-radius: 5px; font-family: 'Noto Sans KR', sans-serif; color: #; cursor: pinter; transition: .5s }\r\n");
      out.write("	.btn:hover { background: #585555; transition: .5s}\r\n");
      out.write("	/* 제목 */\r\n");
      out.write("	#m_title { margin-bottom: 10px; font-size: 3em; text-align: center; font-family: 'Permanent Marker', cursive; }\r\n");
      out.write("	#s_title { margin-bottom: 10px; font-size: 1.75em; font-weight: 900; font-family: 'Noto Sans KR', sans-serif; text-align: center;}\r\n");
      out.write("#s_text { text-align: center; color: #99424f;}\r\n");
      out.write("#d_btn { text-align: right; margin-bottom: 10px;}\r\n");
      out.write("#btn_choice { width: 120px; height: 30px; background: #495057; color: #fff; font-weight: bold; \r\n");
      out.write("border: 0; cursor: pointer;}\r\n");
      out.write("#btn_choice:hover { background: #dee2e6; color: #495057; border: 1px solid #495057;}\r\n");
      out.write("table{ width: 100%; border: 1px solid #495057; border-collapse: collapse;}\r\n");
      out.write("th, td { border: 1px solid #495057;}\r\n");
      out.write("th { background: #ced4da;}\r\n");
      out.write("tr { height: 25px;}\r\n");
      out.write("</style>\r\n");
      out.write("<script>\r\n");
      out.write("// 1번 방법 - 배열에 선택한 회원을 넣고, 해제한 회원을 빼는 방법\r\n");
      out.write("/*\r\n");
      out.write("var choice_arr = [];        // 체크박스의 인덱스값을 저장하는 배열\r\n");
      out.write("window.onload = function() {\r\n");
      out.write("	var btn_choice = document.getElementById(\"btn_choice\");\r\n");
      out.write("	btn_choice.addEventListener(\"click\", function() {\r\n");
      out.write("		location = \"memberAdminDeletePro.jsp?choice_arr=\" + choice_arr;\r\n");
      out.write("	})\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function choice_chk(e) {\r\n");
      out.write("	if(e.checked == true) { // 체크박스가 선택되었을 때 체크박스의 값(회원아이디)을 배열에 저장\r\n");
      out.write("		choice_arr.push(e.value);\r\n");
      out.write("	} else {                // 체크박스가 해제되었을 때 체크박스의 값(회원아이디)을 배열에서 삭제\r\n");
      out.write("		var idx = choice_arr.indexOf(e.value);\r\n");
      out.write("		if(idx != -1) choice_arr.splice(idx, 1); // 체크가 해제된 것을 배열에서 삭제\r\n");
      out.write("	}\r\n");
      out.write("	console.log(choice_arr);\r\n");
      out.write("}\r\n");
      out.write("*/\r\n");
      out.write("\r\n");
      out.write("// 2번 방법 - 실행버튼을 누를 때 체크박스에 선택한 값을 저장하는 방법, 권장하는 방법\r\n");
      out.write("window.onload = function() {\r\n");
      out.write("	var chk_choice = document.getElementsByClassName(\"chk_choice\");\r\n");
      out.write("	var btn_choice = document.getElementById(\"btn_choice\");\r\n");
      out.write("\r\n");
      out.write("	btn_choice.addEventListener(\"click\", function() {\r\n");
      out.write("		var choice_arr = [];\r\n");
      out.write("		for(var i=0; i<chk_choice.length; i++) {\r\n");
      out.write("			if(chk_choice[i].checked) choice_arr.push(chk_choice[i].value);\r\n");
      out.write("		}\r\n");
      out.write("		console.log(choice_arr);\r\n");
      out.write("		location = \"memberAdminDeletePro.jsp?choice_arr=\" + choice_arr;\r\n");
      out.write("	})	\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

request.setCharacterEncoding("utf-8");

String id = request.getParameter("id");
String pwd = request.getParameter("pwd");

// DB 연동, 쿼리 실행
// check가 1이면 성공, 0이면 실패
MemberDBBean memberPro = MemberDBBean.getInstance();
int check = memberPro.checkAdmin(id, pwd);

// check가 0인 경우, 관리자 아이디, 비밀번호 체크에 실패하면 관리자 로그인 페이지로 돌아감
if(check == 0){
	out.print("<script>alert('관리자가 아닙니다. 다시 로그인 해주세요.');");
	out.print("location='memberAdminLoginForm.jsp';</script>");
}

// check가 1인 경우, 관리자 로그인에 성공했을 때
List<MemberDataBean> memberList = memberPro.getMemberList();

      out.write("\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("	<div id=\"m_title\">Street Woman Fighter</div>\r\n");
      out.write("	<div id=\"s_title\">전체 회원 목록</div>\r\n");
      out.write("	<div id=\"s_text\">관리자는 커뮤니티 규정을 위반한 회원을 강제로 탈퇴할 수 있습니다.(ex. 욕설, 음란, 광고, 비방 ...)</div>\r\n");
      out.write("	<div id=\"d_btn\"><input type=\"button\" value=\"선택 회원 강퇴\" id=\"btn_choice\"></div>\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th width=\"3%\">선택</th>\r\n");
      out.write("			<th width=\"9%\">아이디</th>\r\n");
      out.write("			<th width=\"9%\">비밀번호</th>\r\n");
      out.write("			<th width=\"6%\">이름</th>\r\n");
      out.write("			<th width=\"10%\">전화번호</th>\r\n");
      out.write("			<th width=\"33%\">주소</th>\r\n");
      out.write("			<th width=\"15%\">이메일</th>\r\n");
      out.write("			<th width=\"15%\">가입일자</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");
for(MemberDataBean m : memberList) {
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			");
      out.write("\r\n");
      out.write("			<td align=\"center\"><input type=\"checkbox\" class=\"chk_choice\" value=\"");
      out.print(m.getId());
      out.write("\"></td>\r\n");
      out.write("			<td align=\"center\">");
      out.print(m.getId() );
      out.write("</td>\r\n");
      out.write("			<td align=\"center\">");
      out.print(m.getPwd() );
      out.write("</td>\r\n");
      out.write("			<td align=\"center\">");
      out.print(m.getName() );
      out.write("</td>\r\n");
      out.write("			<td align=\"center\">");
      out.print(m.getTel() );
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(m.getAddress1() );
      out.write(' ');
      out.print(m.getAddress2() );
      out.write("</td>\r\n");
      out.write("			<td align=\"center\">");
      out.print(m.getEmail() );
      out.write("</td>\r\n");
      out.write("			<td align=\"center\">");
      out.print(m.getRegdate() );
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");
} 
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
