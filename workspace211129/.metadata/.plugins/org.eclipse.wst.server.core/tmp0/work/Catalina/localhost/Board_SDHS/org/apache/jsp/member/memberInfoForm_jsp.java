/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-11-29 13:25:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import member.*;

public final class memberInfoForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("member");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원정보 확인</title>\r\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Jua&family=Monoton&display=swap\" rel=\"stylesheet\">\r\n");
      out.write("<style>\r\n");
      out.write("/* 전체 영역 */\r\n");
      out.write("#container { width: 500px; margin: 20px auto;}\r\n");
      out.write("/* 제목 */\r\n");
      out.write("#m_title { font-size: 2.5em; text-align: center; margin-bottom: 10px; font-family: 'Monoton', cursive;}\r\n");
      out.write("#s_title { font-size: 2.2em; text-align: center; margin-bottom: 10px; font-family: 'Jua', sans-serif;}\r\n");
      out.write("/* 테이블 */\r\n");
      out.write("table { width: 100%; border: 1px solid black; border-collapse: collapse;}\r\n");
      out.write("th, td { border: 1px solid black;}\r\n");
      out.write("th { background: #dee2e6;}\r\n");
      out.write("td { padding-left: 10px;}\r\n");
      out.write("tr { height: 60px;}\r\n");
      out.write("#chk_pwd, #chk_pwd2, #chk_email, #chk_id, #chk_regdate { font-size: 0.7em;}\r\n");
      out.write("#chk_id, #chk_regdate { color: red;}\r\n");
      out.write(".t_id, .t_regdate { background: #dee2e6;}\r\n");
      out.write("/* 하단 버튼 */\r\n");
      out.write("#btns { text-align: center; margin-top: 20px;}\r\n");
      out.write("#btns > input { width: 110px; height: 35px; background:#495057; color:#fff; border:0; cursor: pointer; \r\n");
      out.write("font-size: 0.9em; font-weight: bold;}\r\n");
      out.write("#btns > input:hover { background: #dee2e6; color: #495057; border: 1px solid #495057;}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("// 입력 유효성 검사\r\n");
      out.write("window.onload = function() {\r\n");
      out.write("	var form = document.infoForm;\r\n");
      out.write("	\r\n");
      out.write("	// 회원정보 수정 버튼\r\n");
      out.write("	var btn_update = document.getElementById(\"btn_update\");\r\n");
      out.write("	btn_update.addEventListener(\"click\", function() {\r\n");
      out.write("		// 회원 수정 내용에 대한 유효성 검사 - 내용이 없을 때\r\n");
      out.write("		if(form.pwd.value.length == 0) {\r\n");
      out.write("			alert(\"비밀번호를 입력해주세요.\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(form.pwd2.value.length == 0) {\r\n");
      out.write("			alert(\"비밀번호 확인을 입력해주세요.\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(form.name.value.length == 0) {\r\n");
      out.write("			alert(\"이름을 입력해주세요.\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(form.tel.value.length == 0) {\r\n");
      out.write("			alert(\"전화번호를 입력해주세요.\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(form.address1.value.length == 0) {\r\n");
      out.write("			alert(\"도로명 주소를 입력해주세요.\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(form.address2.value.length == 0) {\r\n");
      out.write("			alert(\"상세주소를 입력해주세요.\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(form.email.value.length == 0) {\r\n");
      out.write("			alert(\"이메일을 입력해주세요.\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		form.action = \"memberUpdatePro.jsp\";\r\n");
      out.write("		form.submit();\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	// 회원정보 삭제 버튼\r\n");
      out.write("	var btn_delete = document.getElementById(\"btn_delete\");\r\n");
      out.write("	btn_delete.addEventListener(\"click\", function() {\r\n");
      out.write("		if(form.pwd.value.length == 0) {\r\n");
      out.write("			alert(\"비밀번호를 입력해주세요.\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		if(form.pwd2.value.length == 0) {\r\n");
      out.write("			alert(\"비밀번호 확인을 입력해주세요.\");\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		form.action = \"memberDeletePro.jsp\";\r\n");
      out.write("		form.submit();\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	// 비밀번호에 대한 유효성 검사 - 비밀번호 자릿수에 대한 유효성 검사\r\n");
      out.write("	// 비밀번호는 4자리 이상 입력하도록 검사\r\n");
      out.write("	// focus 이벤트 : 포커스(커서)를 가졌을 때 발생하는 이벤트\r\n");
      out.write("	// blur 이벤트 : 포커스(커서)를 잃었을 때 발생하는 이벤트\r\n");
      out.write("	var pwd = form.pwd;\r\n");
      out.write("	var pwd2 = form.pwd2;\r\n");
      out.write("	var chk_pwd = document.getElementById(\"chk_pwd\");\r\n");
      out.write("	var chk_pwd2 = document.getElementById(\"chk_pwd2\");\r\n");
      out.write("	pwd.addEventListener(\"blur\", function() {\r\n");
      out.write("		if(pwd.value.length < 4) {\r\n");
      out.write("			chk_pwd.innerHTML = \"비밀번호는 4자리 이상이어야 합니다.\";\r\n");
      out.write("			chk_pwd.style.color = \"red\";\r\n");
      out.write("			pwd.value = \"\";\r\n");
      out.write("			pwd.focus();\r\n");
      out.write("		} else {\r\n");
      out.write("			chk_pwd.innerHTML = \"사용가능한 비밀번호입니다.\"\r\n");
      out.write("			chk_pwd.style.color = \"blue\";\r\n");
      out.write("		}\r\n");
      out.write("	})\r\n");
      out.write("	// 비밀번호 확인에 대한 유효성 검사 - 비밀번호 확인은 비밀번호 같은 내용이어야함.\r\n");
      out.write("	pwd2.addEventListener(\"blur\", function() {\r\n");
      out.write("		if(pwd.value != pwd2.value) {\r\n");
      out.write("			chk_pwd2.innerHTML = \"비밀번호가 일치하지 않습니다.\";\r\n");
      out.write("			chk_pwd2.style.color = \"red\";\r\n");
      out.write("			pwd2.value = \"\";\r\n");
      out.write("			pwd2.focus();\r\n");
      out.write("		} else {\r\n");
      out.write("			chk_pwd2.innerHTML = \"비밀번호가 일치합니다.\";\r\n");
      out.write("			chk_pwd2.style.color = \"blue\";\r\n");
      out.write("		}\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	// 주소 라이브러리 사용\r\n");
      out.write("	var address1 = form.address1;\r\n");
      out.write("	var btn_address = document.getElementById(\"btn_address\");\r\n");
      out.write("	btn_address.addEventListener(\"click\", function() {\r\n");
      out.write("		new daum.Postcode({\r\n");
      out.write("	       oncomplete: function(data) {\r\n");
      out.write("	           address1.value = data.address;\r\n");
      out.write("	       }\r\n");
      out.write("	    }).open();\r\n");
      out.write("	})\r\n");
      out.write("    \r\n");
      out.write("	\r\n");
      out.write("	// 이메일에 대한 유효성 검사 - '@' 문자를 포함하는지에 관한 유효성 검사\r\n");
      out.write("	var email = form.email;\r\n");
      out.write("	var chk_email = document.getElementById(\"chk_email\");\r\n");
      out.write("	email.addEventListener(\"blur\", function() {\r\n");
      out.write("		var idx = email.value.indexOf(\"@\");\r\n");
      out.write("		if(idx == -1) { // 해당 문자를 찾지 못하면 -1을 리턴\r\n");
      out.write("			chk_email.innerHTML = \"사용가능한 이메일을 입력해주세요.\";\r\n");
      out.write("			chk_email.style.color = \"red\";\r\n");
      out.write("		} else {\r\n");
      out.write("			chk_email.innerHTML = \"사용가능한 이메일입니다.\";\r\n");
      out.write("			chk_email.style.color = \"blue\";\r\n");
      out.write("		}\r\n");
      out.write("	})\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

// 로그인폼에서 넘어오는 데이터 획득
String id = request.getParameter("id");
String pwd = request.getParameter("pwd");
//System.out.println("id = " + id);
//System.out.println("pwd = " + pwd);

// DB 연동, 쿼리문 실행
MemberDBBean memberPro = MemberDBBean.getInstance();
MemberDataBean member = memberPro.getMember(id, pwd);

// 검색한 결과가 없을 때
if(member.getId() == null) {
	out.print("<script>alert('아이디 또는 비밀번호가 일치하지 않습니다.');location='memberLoginForm.jsp';</script>");
}
// 검색한 결과 있을 때 - 아래의 내용 처리

      out.write("\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("	<div id=\"m_title\">Street Women Fighter</div>\r\n");
      out.write("	<div id=\"s_title\">회원 정보 확인</div>\r\n");
      out.write("	<form action=\"memberUpdatePro.jsp\" method=\"post\" name=\"infoForm\">\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th width=\"25%\">아이디</th>\r\n");
      out.write("			<td width=\"75%\">\r\n");
      out.write("				<input type=\"text\" name=\"id\" size=\"15\" readonly value=\"");
      out.print(member.getId());
      out.write("\" class=\"t_id\">&ensp;\r\n");
      out.write("				<span id=\"chk_id\">아이디는 변경할 수 없습니다.</span>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>비밀번호</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"text\" name=\"pwd\" size=\"15\" value=\"");
      out.print(member.getPwd());
      out.write("\">&ensp;\r\n");
      out.write("				<span id=\"chk_pwd\"></span>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>비밀번호 확인</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"text\" name=\"pwd2\" size=\"15\">&ensp;\r\n");
      out.write("				<span id=\"chk_pwd2\"></span>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>이름</th>\r\n");
      out.write("			<td><input type=\"text\" name=\"name\" size=\"15\" value=\"");
      out.print(member.getName());
      out.write("\"></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>전화번호</th>\r\n");
      out.write("			<td><input type=\"text\" name=\"tel\" size=\"15\" value=\"");
      out.print(member.getTel());
      out.write("\"></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>주소</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"button\" value=\"주소 찾기\" id=\"btn_address\" class=\"btn_chk\"><br>\r\n");
      out.write("				<input type=\"text\" name=\"address1\" size=\"45\" value=\"");
      out.print(member.getAddress1());
      out.write("\"><br>\r\n");
      out.write("				<input type=\"text\" name=\"address2\" size=\"45\" value=\"");
      out.print(member.getAddress2());
      out.write("\">\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>이메일</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"text\" name=\"email\" size=\"18\" value=\"");
      out.print(member.getEmail());
      out.write("\">&ensp;\r\n");
      out.write("				<span id=\"chk_email\"></span>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>가입일자</th>\r\n");
      out.write("			<td>\r\n");
      out.write("				<input type=\"text\" name=\"regdate\" size=\"18\" readonly value=\"");
      out.print(member.getRegdate());
      out.write("\" class=\"t_regdate\">&ensp;\r\n");
      out.write("				<span id=\"chk_regdate\">가입일자는 수정할 수 없습니다.</span>\r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	<div id=\"btns\">\r\n");
      out.write("		<input type=\"button\" value=\"수정\" id=\"btn_update\">&emsp;&emsp;\r\n");
      out.write("		<input type=\"button\" value=\"탈퇴\" id=\"btn_delete\">&emsp;&emsp;\r\n");
      out.write("		<input type=\"button\" value=\"돌아가기\" onclick=\"location='memberLoginForm.jsp'\">\r\n");
      out.write("	</div>\r\n");
      out.write("	</form>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
