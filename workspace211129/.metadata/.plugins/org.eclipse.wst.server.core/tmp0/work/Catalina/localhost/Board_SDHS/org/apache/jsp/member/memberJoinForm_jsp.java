/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-11-29 13:25:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memberJoinForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>회원가입폼</title>\r\n");
      out.write("<style>\r\n");
      out.write("	@import url('https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap');\r\n");
      out.write("	/*전체영역*/\r\n");
      out.write("	#container{ width: 500px; margin: 20px auto;}\r\n");
      out.write("	.btn { padding:10px; background: #b4baba; border: none; border-radius: 5px; font-family: 'Noto Sans KR', sans-serif; color: #; cursor: pinter; }\r\n");
      out.write("	.btn:hover { background: #585555; transition: .5s}\r\n");
      out.write("	/* 제목 */\r\n");
      out.write("	#m_title { margin-bottom: 10px; font-size: 3em; text-align: center; font-family: 'Permanent Marker', cursive; }\r\n");
      out.write("	#s_title { margin-bottom: 10px; font-size: 1.75em; font-weight: 900; font-family: 'Noto Sans KR', sans-serif; text-align: center;}\r\n");
      out.write("	/*테이블*/\r\n");
      out.write("	table {	width:100%; border: 1px solid #000; border-collapse: collapse; font-family: 'Noto Sans KR', sans-serif;}\r\n");
      out.write("	th, td { border: 1px solid #000;}\r\n");
      out.write("	th { background: #585555; color:#fff}\r\n");
      out.write("	td { padding-left:10px;}\r\n");
      out.write("	tr { height:60px;}\r\n");
      out.write("	/* 하단버튼 */\r\n");
      out.write("	#btns { margin-top: 10px; text-align: center; }\r\n");
      out.write("	#btns input{width: 100px; border-radius: 0px;}\r\n");
      out.write("	#chk_pwd, #chk_pwd2, #chk_email{ color: red; font-size: .5em; }\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"//t1.daumcdn.net/mapjsapi/bundle/postcode/prod/postcode.v2.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("	window.onload = () => {\r\n");
      out.write("		let form = document.joinForm;\r\n");
      out.write("		// 회원 가입 내용에 대한 유효성 검사 - 내용을 입력\r\n");
      out.write("		let btn_insert = document.querySelector(\"#btn_insert\");\r\n");
      out.write("		btn_insert.addEventListener(\"click\", () => {\r\n");
      out.write("			if(form.id.value.length === 0){\r\n");
      out.write("				alert(\"아이디를 입력해주세요.\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			if(form.pwd.value.length === 0){\r\n");
      out.write("				alert(\"비밀번호를 입력해주세요.\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			if(form.pwd2.value.length === 0){\r\n");
      out.write("				alert(\"비밀번호가 틀림.\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			if(form.name.value.length === 0){\r\n");
      out.write("				alert(\"이름를 입력해주세요.\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			if(form.tel.value.length === 0){\r\n");
      out.write("				alert(\"전화번호를 입력해주세요.\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			if(form.address1.value.length === 0){\r\n");
      out.write("				alert(\"전화번호를 입력해주세요.\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			if(form.address2.value.length === 0){\r\n");
      out.write("				alert(\"전화번호를 입력해주세요.\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			if(form.email.value.length === 0){\r\n");
      out.write("				alert(\"전화번호를 입력해주세요.\");\r\n");
      out.write("				return;\r\n");
      out.write("			}\r\n");
      out.write("			form.submit();\r\n");
      out.write("		});\r\n");
      out.write("		let pwd = form.pwd;\r\n");
      out.write("		let pwd2 = form.pwd2;\r\n");
      out.write("		let chk_pwd = document.querySelector(\"#chk_pwd\");\r\n");
      out.write("		let chk_pwd2 = document.querySelector(\"#chk_pwd2\");\r\n");
      out.write("		pwd.addEventListener(\"blur\", () => {\r\n");
      out.write("			if(pwd.value.length < 4){\r\n");
      out.write("				chk_pwd.innerText = \"4자리 이상이어야 합니다.\";\r\n");
      out.write("				pwd.focus();\r\n");
      out.write("			}else{\r\n");
      out.write("				chk_pwd.innerText = \"사용가능한 비밀번호입니다\";\r\n");
      out.write("				chk_pwd.style.color = \"blue\";\r\n");
      out.write("			};\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		pwd2.addEventListener(\"blur\", () => {\r\n");
      out.write("				if(pwd.value !== pwd2.value){\r\n");
      out.write("					chk_pwd2.innerText = \"비밀번호가 일치하지 않습니다.\";\r\n");
      out.write("					pwd2.focus();\r\n");
      out.write("				}else{\r\n");
      out.write("					chk_pwd2.innerText = \"비밀번호가 일치합니다\";\r\n");
      out.write("					chk_pwd2.style.color = \"blue\";\r\n");
      out.write("				}\r\n");
      out.write("		});\r\n");
      out.write("		let address1 = form.address1;\r\n");
      out.write("		let btn_address = document.querySelector('#btn_address');\r\n");
      out.write("		btn_address.addEventListener(\"click\", () => {\r\n");
      out.write("			new daum.Postcode({\r\n");
      out.write("				oncomplete: function(data) {\r\n");
      out.write("					address1.value = data.address;\r\n");
      out.write("			    }\r\n");
      out.write("			}).open();	\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("\r\n");
      out.write("	let email = form.email;\r\n");
      out.write("	let chk_email = document.querySelector(\"#chk_email\");\r\n");
      out.write("	email.addEventListener(\"blur\", () => {\r\n");
      out.write("		if(email.value.indexOf('@') === -1){\r\n");
      out.write("			chk_email.innerText = \"사용가능한 이메일을 입력해주세요\";\r\n");
      out.write("			email.focus();\r\n");
      out.write("		}else{\r\n");
      out.write("			chk_email.innerText = \"사용가능한 이메일입니다\";\r\n");
      out.write("			chk_email.style.color = \"blue\";\r\n");
      out.write("		};\r\n");
      out.write("	});\r\n");
      out.write("\r\n");
      out.write("	// 중복 아이디 체크\r\n");
      out.write("	let btn_chk_id = document.querySelector('#btn_chk_id');\r\n");
      out.write("	btn_chk_id.addEventListener(\"click\", () => {\r\n");
      out.write("		if(!form.id.value){\r\n");
      out.write("			alert(\"아이디를 입력해주세요\");\r\n");
      out.write("			form.id.focus();\r\n");
      out.write("		}else{\r\n");
      out.write("			location = \"memberIdCheck.jsp?id=\"+form.id.value;\r\n");
      out.write("		}\r\n");
      out.write("	})\r\n");
      out.write("	\r\n");
      out.write("	};\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<div id=\"container\">\r\n");
      out.write("		<h2 id=\"m_title\">Street Women Fighter</h2>	\r\n");
      out.write("		<h3 id=\"s_title\">회원가입</h3>\r\n");
      out.write("		<form action=\"memberJoinPro.jsp\" method=\"post\" name=\"joinForm\">\r\n");
      out.write("		<table>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th width=\"25%\">아이디</th>\r\n");
      out.write("				<td width=\"75%\">\r\n");
      out.write("					<input type=\"text\" name=\"id\" size=\"15\"> &ensp;\r\n");
      out.write("					<input type=\"button\" value=\"ID 중복 체크\" id=\"btn_chk_id\" class=\"btn_chk btn\" >\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>비밀번호</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"password\" name=\"pwd\" size=\"15\">\r\n");
      out.write("					<span id=\"chk_pwd\"></span>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>비밀번호 확인</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"password\" name=\"pwd2\" size=\"15\">&ensp;\r\n");
      out.write("					<span id=\"chk_pwd2\"></span>					\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>이름</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"name\" size=\"15\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>전화번호</th>\r\n");
      out.write("				<td><input type=\"text\" name=\"tel\" size=\"15\"></td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>주소</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"button\" value=\"주소찾기\" id=\"btn_address\" class=\"btn_chk btn\"><br>\r\n");
      out.write("					<input type=\"text\" name=\"address1\" size=\"45\"><br>\r\n");
      out.write("					<input type=\"text\" name=\"address2\" size=\"45\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("			<tr>\r\n");
      out.write("				<th>이메일</th>\r\n");
      out.write("				<td>\r\n");
      out.write("					<input type=\"email\" name=\"email\" size=\"15\">&ensp;\r\n");
      out.write("					<span id=\"chk_email\"></span>\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("		<div id=\"btns\">\r\n");
      out.write("			<input type=\"button\" value=\"가입\" id=\"btn_insert\" class=\"btn\"> &emsp;\r\n");
      out.write("			<input type=\"button\" value=\"취소\" onclilk=\"location='memberLoginForm.jsp'\" class=\"btn\">\r\n");
      out.write("		</div>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
