/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-11-30 05:42:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memberLoginForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>로그인 폼</title>\n");
      out.write("<link href=\"https://fonts.googleapis.com/css2?family=Jua&family=Monoton&display=swap\" rel=\"stylesheet\">\n");
      out.write("<style>\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap');\n");
      out.write("	/*전체영역*/\n");
      out.write("	a{text-decoration: none; color: #000;}\n");
      out.write("	.flex{display: flex}\n");
      out.write("	#container{ width: 400px; margin: 20px auto;}\n");
      out.write("	.btn { padding:10px; background: #b4baba; border: none; border-radius: 5px; font-family: 'Noto Sans KR', sans-serif; color: #; cursor: pinter; transition: .5s }\n");
      out.write("	.btn:hover { background: #585555; transition: .5s}\n");
      out.write("	/* 제목 */\n");
      out.write("	#m_title { margin-bottom: 10px; font-size: 3em; text-align: center; font-family: 'Permanent Marker', cursive; }\n");
      out.write("	#s_title { margin-bottom: 10px; font-size: 1.75em; font-weight: 900; font-family: 'Noto Sans KR', sans-serif; text-align: center;}\n");
      out.write("/* 테이블 */\n");
      out.write("table { width: 100%;}\n");
      out.write("td { }\n");
      out.write("tr { height: 50px;}\n");
      out.write("input { height: 45px;}\n");
      out.write(".t_input { width: 380px; padding-left: 10px;}\n");
      out.write(".td_chk { display: flex; align-items: center; font-size: 0.9em;}\n");
      out.write("#btn_login { width: 400px; height: 55px; border: 0; background: #495057; color: #fff; \n");
      out.write("font-size: 1.2em; font-weight: bold; cursor:pointer;}\n");
      out.write(".td_end { text-align: center; font-size: 0.9em;}\n");
      out.write("a { text-decoration: none; color: black;}\n");
      out.write("#btn_member { cursor: pointer;}\n");
      out.write("</style>\n");
      out.write("<script>\n");
      out.write("window.onload = function() {\n");
      out.write("	var form = document.loginForm;\n");
      out.write("	\n");
      out.write("	// 로그인 버튼 처리\n");
      out.write("	var btn_login = document.querySelector(\"#btn_login\");\n");
      out.write("	btn_login.addEventListener(\"click\", function() {\n");
      out.write("		// 로그인폼의 유효성 검사\n");
      out.write("		if(!form.id.value) {\n");
      out.write("			alert(\"아이디를 입력해주세요.\");\n");
      out.write("			form.id.focus();\n");
      out.write("			return;\n");
      out.write("		}\n");
      out.write("		if(!form.pwd.value) {\n");
      out.write("			alert(\"비밀번호를 입력해주세요.\");\n");
      out.write("			form.pwd.focus();\n");
      out.write("			return;\n");
      out.write("		}\n");
      out.write("		form.action = \"memberLoginPro.jsp\";\n");
      out.write("		form.submit();\n");
      out.write("	})\n");
      out.write("	\n");
      out.write("	// 가입정보 확인 버튼 처리\n");
      out.write("	var btn_member = document.querySelector(\"#btn_member\");\n");
      out.write("	btn_member.addEventListener(\"click\", function() {\n");
      out.write("		// get 방식 : 아이디와 비밀번호가 노출되어 권장되지 않는 방법\n");
      out.write("		//location = \"memberInfoForm.jsp?id=\" + form.id.value + \"&pwd=\" + form.pwd.value;\n");
      out.write("	\n");
      out.write("		// post 방식 : 아이디와 비밀번호를 내부에 숨겨 전달되므로 안전하여 권장되는 방법\n");
      out.write("		// 로그인폼의 유효성 검사\n");
      out.write("		if(!form.id.value) {\n");
      out.write("			alert(\"아이디를 입력해주세요.\");\n");
      out.write("			form.id.focus();\n");
      out.write("			return;\n");
      out.write("		}\n");
      out.write("		if(!form.pwd.value) {\n");
      out.write("			alert(\"비밀번호를 입력해주세요.\");\n");
      out.write("			form.pwd.focus();\n");
      out.write("			return;\n");
      out.write("		}\n");
      out.write("		form.action = \"memberInfoForm.jsp\"; // 액션 변경\n");
      out.write("		form.submit();\n");
      out.write("	})\n");
      out.write("	\n");
      out.write("	/* \n");
      out.write("	< http와 session의 차이점 >\n");
      out.write("	HTTP : HyperText Transter Protocol(하이퍼텍스트 전송 규약), \n");
      out.write("	- stateless 속성을 가짐\n");
      out.write("	- 연결상태를 유지하지 않음(페이지를 이동하여 연결을 끊음), 장점: 서버의 부하가 걸리지 않음, \n");
      out.write("	- 연결상태를 계속유지해야만 하는 곳에서는 문제가 발생, ex) 로그인, 장바구니, 결제처리 ...\n");
      out.write("	\n");
      out.write("	Session : 웹페이지에서 연결상태를 계속 유지하도록 하는 특성\n");
      out.write("	- state 속성을 가짐\n");
      out.write("	- 로그인, 장바구니, 결제처리 ... 에서는 session 속성을 사용해야만 함\n");
      out.write("	\n");
      out.write("	연결상태를 유지하는 특성 2가지 : session, cookie\n");
      out.write("	< session과 cookie의 차이점 >\n");
      out.write("	session - 연결상태의 정보를 서버에 저장하고 있음. 보안이 효율적임.\n");
      out.write("	cookie - 연결상태의 정보를 사용자 측에 저장하고 있음. 보안이 취약함.\n");
      out.write("	\n");
      out.write("	*/\n");
      out.write("	\n");
      out.write("	// 쿠키를 확인\n");
      out.write("	if(document.cookie.length > 0) { // 쿠키가 있을 때\n");
      out.write("		// name이 'cookieId'인 쿠키의 값을 추출\n");
      out.write("		var searchId = \"cookieId=\";\n");
      out.write("		var idx = document.cookie.indexOf(searchId);\n");
      out.write("		if(idx != -1) { // 쿠키가 존재한다면 \n");
      out.write("			idx += searchId.length;\n");
      out.write("			var end = document.cookie.indexOf(\";\", idx);\n");
      out.write("			if(end == -1) {\n");
      out.write("				end = document.cookie.length;\n");
      out.write("			}\n");
      out.write("			form.id.value = document.cookie.substring(idx, end);\n");
      out.write("			form.t_chk.checked = true;\n");
      out.write("		}\n");
      out.write("	}\n");
      out.write("	\n");
      out.write("	// 쿠키를 생성\n");
      out.write("	// 아이디 저장 : 자바스크립의 쿠키 기능을 사용\n");
      out.write("	// document.cookie -> 자바스크립트에서 사용하는 쿠키\n");
      out.write("	// 쿠키를 만들 때 반드시 설정해야 값 : 이름, 값, 유지시간\n");
      out.write("	// escape() 함수 : *, -, _, +, ., / 를 제외한 모든 문자를 16진수로 변환하는 함수\n");
      out.write("	// - 쉼표, 세미콜론 등과 같은 문자가 쿠키에서 사용되는 문자열과의 충돌을 방지하기 위해서 사용\n");
      out.write("	var t_chk = document.getElementById(\"t_chk\");\n");
      out.write("	t_chk.addEventListener(\"click\", function() {\n");
      out.write("		var now = new Date();      // 오늘 날짜\n");
      out.write("		var name = \"cookieId\";     // 쿠키 이름\n");
      out.write("		var value = form.id.value; // 쿠키 값\n");
      out.write("		\n");
      out.write("		if(form.t_chk.checked == true) { // 체크되었다면 쿠키를 생성\n");
      out.write("			now.setDate(now.getDate() + 7); // 쿠키를 유지하는 시간, 7일 동안 쿠키를 유지\n");
      out.write("			document.cookie = name + \"=\" + escape(value) + \";path=/;expires=\" + now.toGMTString() + \";\";\n");
      out.write("			console.log(document.cookie);\n");
      out.write("		} else {                         // 해제되었다면 쿠키를 사용 만료\n");
      out.write("			now.setDate(now.getDate() + 0); // 쿠키를 삭제, 유지시간을 0으로 설정\n");
      out.write("			document.cookie = name + \"=\" + escape(value) + \";path=/;expires=\" + now.toGMTString() + \";\";\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("	})\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<div id=\"container\">\n");
      out.write("	<div id=\"m_title\">Street Woman Fighter</div>\n");
      out.write("	<div id=\"s_title\">로그인</div>\n");
      out.write("	<form action=\"memberLoginPro.jsp\" method=\"post\" name=\"loginForm\">\n");
      out.write("		<table>\n");
      out.write("			<tr>\n");
      out.write("				<td><input type=\"text\" name=\"id\" class=\"t_input\" placeholder=\"아이디\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<td><input type=\"password\" name=\"pwd\" class=\"t_input\" placeholder=\"비밀번호\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<td class=\"td_chk\">\n");
      out.write("					<input type=\"checkbox\" name=\"save_id\" id=\"t_chk\">&ensp;\n");
      out.write("					<label for=\"t_chk\">아이디 저장</label>\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<td><input type=\"button\" value=\"로그인\" id=\"btn_login\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<td class=\"td_end\">\n");
      out.write("					<a href=\"memberFindIdForm.jsp\">아이디 찾기</a> | \n");
      out.write("					<a href=\"memberFindPwdForm.jsp\">비밀번호 찾기</a> | \n");
      out.write("					<span id=\"btn_member\">가입정보 확인</span> | \n");
      out.write("					<a href=\"memberJoinForm.jsp\">회원가입</a>\n");
      out.write("				</td>\n");
      out.write("			</tr>\n");
      out.write("		</table>\n");
      out.write("	</form>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
