/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-12-01 02:01:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.text.SimpleDateFormat;
import board.BoardDataBean;
import board.BoardDBBean;

public final class boardContent_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.text.SimpleDateFormat");
    _jspx_imports_classes.add("board.BoardDataBean");
    _jspx_imports_classes.add("board.BoardDBBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>글 상세보기 페이지</title>\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap');\r\n");
      out.write("/*전체영역*/\r\n");
      out.write("*{box-sizing: border-box; margin: 0; padding: 0;}\r\n");
      out.write("a{text-decoration: none; color:#99424f;}\r\n");
      out.write("h2{text-align: center;}\r\n");
      out.write(".btn { padding:10px; background: #b4baba; border: none; border-radius: 5px; font-family: 'Noto Sans KR', sans-serif; color: #; cursor: pinter; }\r\n");
      out.write(".btn:hover { background: #585555; color: #fff; transition: .5s}\r\n");
      out.write(".grid{display: grid;}\r\n");
      out.write(".flex{display: flex;}\r\n");
      out.write("#container{ width: 1500px; margin: 20px auto;}\r\n");
      out.write("\r\n");
      out.write(".content{grid-template-columns: 30%  minmax(70%, auto); grid-template-rows: 50px 300px 50px 50px ; }\r\n");
      out.write(".content div{ border: 3px solid #000; border-bottom: none; border-right: none;}\r\n");
      out.write(".content div:nth-of-type(7), .content div:nth-of-type(8){border-bottom: 3px solid #000;}\r\n");
      out.write(".content div:nth-of-type(2), .content div:nth-of-type(4), .content div:nth-of-type(6),.content div:nth-of-type(8){border-right: 3px solid #000;}\r\n");
      out.write(".content .grid{ background: #b4baba; align-items: center; }\r\n");
      out.write(".m_item{  padding-bottom: 20px; justify-content: right ; }\r\n");
      out.write("/* 제목 */\r\n");
      out.write("#m_title {  margin-bottom: 10px; font-size: 3em; text-align: center; font-family: 'Permanent Marker', cursive; }\r\n");
      out.write("#s_title { margin-bottom: 40px; font-size: 1.75em; font-weight: 900; font-family: 'Noto Sans KR', sans-serif; text-align: center;}\r\n");
      out.write(".d_login { grid-template-columns: 80px 80px; justify-content: right ; text-align: right;}\r\n");
      out.write(".big{width: 100%; grid-template-columns: 30% 70%; justify-content: center;}\r\n");
      out.write("#num{display: none;}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("window.onload = function() {\r\n");
      out.write("	let form = document.boardForm;\r\n");
      out.write("	document\r\n");
      out.write("	let update_btn = document.querySelector(\"#update\");\r\n");
      out.write("	let delete_btn = document.querySelector(\"#delete\");\r\n");
      out.write("	\r\n");
      out.write("	update_btn.addEventListener(\"click\", () => {\r\n");
      out.write("		if(!form.subject.value) {\r\n");
      out.write("			alert(\"제목 입력해주세요.\");\r\n");
      out.write("			form.subject.focus();\r\n");
      out.write("			return;\r\n");
      out.write("		};\r\n");
      out.write("		if(!form.content.value) {\r\n");
      out.write("			alert(\"내용 입력해주세요.\");\r\n");
      out.write("			form.content.focus();\r\n");
      out.write("			return;\r\n");
      out.write("		};\r\n");
      out.write("		form.action = \"boardUpdatePro.jsp\";\r\n");
      out.write("		form.submit(); \r\n");
      out.write("	});\r\n");
      out.write("	delete_btn.addEventListener(\"click\", () => {\r\n");
      out.write("		form.action = \"boardDeletePro.jsp\";\r\n");
      out.write("		form.submit();\r\n");
      out.write("	});\r\n");
      out.write("};\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");

	BoardDBBean boardPro = BoardDBBean.getInstance();
	List<BoardDataBean> boardList = boardPro.getBoardList(); 
	int cnt = boardList.size(); 
	String id = (String)session.getAttribute("memberId");
	int num = Integer.parseInt(request.getParameter("num"));
	BoardDataBean board = boardPro.getBoard(num);
	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("		<div id=\"m_title\">Street Woman Fighter</div>\r\n");
      out.write("		<div id=\"s_title\">글 상세보기</div>\r\n");
      out.write("		<div class=\"m_item grid\">\r\n");
      out.write("			<div class=\"d_login grid\">\r\n");
      out.write("				<div id=\"d_id\">");
      out.print(id );
      out.write("님</div>\r\n");
      out.write("				<div id=\"btn_logout\"><a href=\"../member/memberLogout.jsp\">로그아웃</a></div>\r\n");
      out.write("			</div>\r\n");
      out.write("			<div class=\"btns \">\r\n");
      out.write("				<button class=\"btn\" id=\"update\">글수정</button>\r\n");
      out.write("				<button class=\"btn\" id=\"delete\">글삭제</button>\r\n");
      out.write("				<button class=\"btn\" onclick=\"boardList.jsp\">돌아가기</button>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	<div class=\"big grid\">\r\n");
      out.write("		 <div>\r\n");
      out.write("			");

			for(BoardDataBean boards : boardList) {
			
      out.write("\r\n");
      out.write("				<div class=\"flex\">\r\n");
      out.write("					<div>");
      out.print(cnt--  );
      out.write("</div>\r\n");
      out.write("					<div><a href=\"boardContent.jsp?num=");
      out.print(boards.getNum());
      out.write('"');
      out.write('>');
      out.print(board.getSubject() );
      out.write("</a></div>\r\n");
      out.write("					<div>");
      out.print(boards.getWriter() );
      out.write("</div>\r\n");
      out.write("					<div>");
      out.print(sdf.format(boards.getRegdate()) );
      out.write("</div>\r\n");
      out.write("					<div>");
      out.print(boards.getReadcount() );
      out.write("</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				");

				}
				
      out.write("\r\n");
      out.write("		</div>\r\n");
      out.write("		<form action=\"boardUpdatePro.jsp\" method=\"post\" name=\"boardForm\">\r\n");
      out.write("			<div class=\"grid content\">\r\n");
      out.write("				<div class=\"grid\"><h2>제목</h2></div>\r\n");
      out.write("				<div><input type=\"text\" name=\"subject\" value=\"");
      out.print(board.getSubject() );
      out.write("\"></div>\r\n");
      out.write("				<div class=\"grid\"><h2>내용</h2></div>\r\n");
      out.write("				<div><input type=\"text\" name=\"content\" value=\"");
      out.print(board.getContent() );
      out.write("\"></div>\r\n");
      out.write("				<div class=\"grid\"><h2>작성자</h2></div>\r\n");
      out.write("				<div>");
      out.print(board.getWriter() );
      out.write("</div>\r\n");
      out.write("				<div class=\"grid\"><h2>작성일자</h2></div>\r\n");
      out.write("				<div>");
      out.print(sdf.format(board.getRegdate()) );
      out.write("</div> \r\n");
      out.write("				<input type=\"hidden\" name=\"num\" value=\"");
      out.print(board.getNum() );
      out.write("\">\r\n");
      out.write("			</div>\r\n");
      out.write("		</form>\r\n");
      out.write("	</div>\r\n");
      out.write("</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
