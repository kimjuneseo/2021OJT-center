/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.54
 * Generated at: 2021-12-02 05:35:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.member;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class memberAdminLoginForm_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>관리자 로그인 폼</title>\n");
      out.write("<style>\n");
      out.write("@import url('https://fonts.googleapis.com/css2?family=Permanent+Marker&display=swap');\n");
      out.write("	/*전체영역*/\n");
      out.write("	a{text-decoration: none; color: #000;}\n");
      out.write("	.flex{display: flex}\n");
      out.write("	#container{ width: 400px; margin: 20px auto;}\n");
      out.write("	.btn { padding:10px; background: #b4baba; border: none; border-radius: 5px; font-family: 'Noto Sans KR', sans-serif; color: #; cursor: pinter; transition: .5s }\n");
      out.write("	.btn:hover { background: #585555; transition: .5s}\n");
      out.write("	/* 제목 */\n");
      out.write("	#m_title { margin-bottom: 10px; font-size: 3em; text-align: center; color:#ad7ca4; font-family: 'Permanent Marker', cursive; }\n");
      out.write("	#s_title { margin-bottom: 10px; font-size: 1.75em; color:#ad7ca4; font-weight: 900; font-family: 'Noto Sans KR', sans-serif; text-align: center;}\n");
      out.write("/* 테이블 */\n");
      out.write("table { width: 100%;}\n");
      out.write("td { }\n");
      out.write("tr { height: 50px;}\n");
      out.write("input { height: 45px;}\n");
      out.write(".t_input { width: 380px; padding-left: 10px;}\n");
      out.write("#btn_login { width: 400px; height: 55px; border: 0; background: #ad7ca4; color: #fff; \n");
      out.write("font-size: 1.2em; font-weight: bold; cursor:pointer;}\n");
      out.write("</style>\n");
      out.write("<script>\n");
      out.write("window.onload = function() {\n");
      out.write("	var form = document.loginForm;\n");
      out.write("	\n");
      out.write("	// 로그인 버튼 처리\n");
      out.write("	var btn_login = document.querySelector(\"#btn_login\");\n");
      out.write("	btn_login.addEventListener(\"click\", function() {\n");
      out.write("		// 로그인폼의 유효성 검사\n");
      out.write("		if(!form.id.value) {\n");
      out.write("			alert(\"아이디를 입력해주세요.\");\n");
      out.write("			form.id.focus();\n");
      out.write("			return;\n");
      out.write("		}\n");
      out.write("		if(!form.pwd.value) {\n");
      out.write("			alert(\"비밀번호를 입력해주세요.\");\n");
      out.write("			form.pwd.focus();\n");
      out.write("			return;\n");
      out.write("		}\n");
      out.write("		form.submit();\n");
      out.write("	})	\n");
      out.write("}\n");
      out.write("</script>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<div id=\"container\">\n");
      out.write("	<div id=\"m_title\">Street Woman Fighter</div>\n");
      out.write("	<div id=\"s_title\">관리자 로그인</div>\n");
      out.write("	<form action=\"memberInfoAllForm.jsp\" method=\"post\" name=\"loginForm\">\n");
      out.write("		<table>\n");
      out.write("			<tr>\n");
      out.write("				<td><input type=\"text\" name=\"id\" class=\"t_input\" placeholder=\"아이디\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<td><input type=\"password\" name=\"pwd\" class=\"t_input\" placeholder=\"비밀번호\"></td>\n");
      out.write("			</tr>\n");
      out.write("			<tr>\n");
      out.write("				<td><input type=\"button\" value=\"관리자 로그인\" id=\"btn_login\"></td>\n");
      out.write("			</tr>\n");
      out.write("		</table>\n");
      out.write("	</form>\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
